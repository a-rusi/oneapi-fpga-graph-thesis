var areaJSON={"columns":["", "ALUTs", "FFs", "RAMs", "DSPs", "MLABs", "Details"], "debug_enabled":"true", "type":"module", "total_percent":[43.131, 22.2542, 22.1754, 24.0324, 8.10277], "total":[188680, 378933, 652, 123, 73], "name":"Kernel System", "max_resources":[854400, 1708800, 2713, 1518, 42720], "children":[{"name":"Static Partition", "type":"partition", "children":[{"name":"Board interface", "type":"resource", "data":[179950, 358572, 492, 123, 0], "details":[{"type":"text", "text":"Platform interface logic."}]}]}, {"name":"Global interconnect", "type":"resource", "data":[2313, 3521, 61, 0, 0], "details":[{"type":"text", "text":"Global interconnect for 5 global loads and 2 global stores. Reduce number of global loads and stores to simplify global interconnect."}, {"type":"brief", "text":"For 5 global loads and 2 global stores."}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Global Memory Interconnect", "link":"file:////opt/intel/oneapi/compiler/2021.1.1/linux/lib/oclfpga/aoc_help_pages/hnj1476724450050.html"}]}]}, {"name":"System description ROM", "type":"resource", "data":[0, 67, 2, 0, 0], "details":[{"type":"text", "text":"This read-only memory contains information for the host about the system and about each kernel in the system, including kernel names, arguments, and attributes. The system description ROM ensures that the binary image on the FPGA is compatible with the host program."}, {"type":"brief", "text":"Contains information for the host."}]}, {"name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41", "compute_units":1, "type":"function", "total_percent":[1.85599, 0.921934, 0.981566, 3.57538, 0], "total_kernel_resources":[6417, 16773, 97, 0, 73], "details":[{"type":"text", "text":"Number of compute units: 1"}, {"type":"brief", "text":"1 compute unit."}], "children":[{"name":"Function overhead", "type":"resource", "data":[1327, 2405, 0, 0, 10], "details":[{"type":"text", "text":"Kernel dispatch logic."}, {"type":"brief", "text":"Kernel dispatch logic."}]}, {"name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41.B0", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[241, 401, 3, 0, 0], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[241, 401, 3, 0, 0]}]}, {"name":"Computation", "type":"resource", "children":[{"name":"main.cpp:82", "type":"resource", "data":[373.5, 440, 13, 0, 0], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":82}]], "children":[{"name":"1-bit Or", "type":"resource", "count":1, "data":[0.5, 0, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":1, "data":[11, 0, 0, 0, 0]}, {"name":"Load", "type":"resource", "count":1, "data":[362, 440, 13, 0, 0], "details":[{"type":"text", "text":"Load uses a Prefetching LSU"}, {"type":"brief", "text":"Prefetching LSU"}]}], "replace_name":"true"}, {"name":"main.cpp:84 > stl_iterator.h:886", "type":"resource", "data":[21, 0, 0, 0, 0], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":84}, {"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_iterator.h", "line":886}]], "children":[{"name":"64-bit Integer Compare", "type":"resource", "count":1, "data":[21, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"main.cpp:84 > stl_vector.h:573 > \\nstl_iterator.h:783", "type":"resource", "data":[406.5, 1325.5, 8, 0, 0], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":84}, {"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_vector.h", "line":573}, {"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_iterator.h", "line":783}]], "children":[{"name":"Load", "type":"resource", "count":1, "data":[406.5, 1325.5, 8, 0, 0], "details":[{"type":"brief", "text":"Burst-coalesced non-aligned LSU"}, {"type":"text", "text":"Load uses a Burst-coalesced non-aligned LSU.  Use Dynamic Profiler to determine performance impact of this LSU."}]}], "replace_name":"true"}, {"name":"main.cpp:84 > stl_vector.h:591 > \\nstl_iterator.h:783", "type":"resource", "data":[406.5, 1325.5, 8, 0, 0], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":84}, {"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_vector.h", "line":591}, {"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_iterator.h", "line":783}]], "children":[{"name":"Load", "type":"resource", "count":1, "data":[406.5, 1325.5, 8, 0, 0], "details":[{"type":"brief", "text":"Burst-coalesced non-aligned LSU"}, {"type":"text", "text":"Load uses a Burst-coalesced non-aligned LSU.  Use Dynamic Profiler to determine performance impact of this LSU."}]}], "replace_name":"true"}, {"name":"main.cpp:86", "type":"resource", "data":[0.5, 0, 0, 0, 0], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":86}]], "children":[{"name":"1-bit Or", "type":"resource", "count":1, "data":[0.5, 0, 0, 0, 0]}], "replace_name":"true"}]}]}, {"name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41.B1", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[399, 453, 18, 0, 1], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[399, 453, 18, 0, 1]}]}, {"name":"Computation", "type":"resource", "children":[{"name":"main.cpp:82", "type":"resource", "data":[0.666667, 0, 0, 0, 0], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":82}]], "children":[{"name":"1-bit Or", "type":"resource", "count":2, "data":[0.666667, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"main.cpp:84 > stl_iterator.h:886", "type":"resource", "data":[23.6667, 0, 0, 0, 0], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":84}, {"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_iterator.h", "line":886}]], "children":[{"name":"1-bit Or", "type":"resource", "count":4, "data":[2.66667, 0, 0, 0, 0]}, {"name":"64-bit Integer Compare", "type":"resource", "count":1, "data":[21, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"main.cpp:86", "type":"resource", "data":[1019, 4100, 30, 0, 0], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":86}]], "children":[{"name":"32-bit Integer Compare", "type":"resource", "count":1, "data":[11, 0, 0, 0, 0]}, {"name":"Load", "type":"resource", "count":2, "data":[1008, 4100, 30, 0, 0], "details":[{"type":"text", "text":"Load uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}], "replace_name":"true"}, {"name":"main.cpp:88", "type":"resource", "data":[399.667, 2216, 1, 0, 31], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":88}]], "children":[{"name":"1-bit Or", "type":"resource", "count":2, "data":[0.666667, 0, 0, 0, 0]}, {"name":"Store", "type":"resource", "count":1, "data":[399, 2216, 1, 0, 31], "details":[{"type":"text", "text":"Store uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}], "replace_name":"true"}, {"name":"main.cpp:89", "type":"resource", "data":[1799, 4107, 16, 0, 31], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":89}]], "children":[{"name":"Load", "type":"resource", "count":1, "data":[504, 2050, 15, 0, 0], "details":[{"type":"text", "text":"Load uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}, {"name":"Store", "type":"resource", "count":1, "data":[1295, 2057, 1, 0, 31], "details":[{"type":"text", "text":"Store uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}], "replace_name":"true"}]}]}]}]};
var area_srcJSON={"children":[{"children":[{"data":[179950,358572,492,123,0],"details":[{"text":"Platform interface logic.","type":"text"}],"name":"Board interface","type":"resource"}],"name":"Static Partition","type":"partition"},{"data":[2313,3521,61,0,0],"details":[{"text":"Global interconnect for 5 global loads and 2 global stores. Reduce number of global loads and stores to simplify global interconnect.","type":"text"},{"text":"For 5 global loads and 2 global stores.","type":"brief"},{"links":[{"guide":"Best Practices Guide : Global Memory Interconnect","link":"file:////opt/intel/oneapi/compiler/2021.1.1/linux/lib/oclfpga/aoc_help_pages/hnj1476724450050.html"}],"text":"See %L for more information","type":"text"}],"name":"Global interconnect","type":"resource"},{"data":[0,67,2,0,0],"details":[{"text":"This read-only memory contains information for the host about the system and about each kernel in the system, including kernel names, arguments, and attributes. The system description ROM ensures that the binary image on the FPGA is compatible with the host program.","type":"text"},{"text":"Contains information for the host.","type":"brief"}],"name":"System description ROM","type":"resource"},{"children":[{"data":[0,0,0,0,0],"details":[{"text":"Feedback+Cluster logic","type":"brief"}],"name":"Data control overhead","type":"resource"},{"data":[1327,2405,0,0,10],"details":[{"text":"Kernel dispatch logic.","type":"text"},{"text":"Kernel dispatch logic.","type":"brief"}],"name":"Function overhead","type":"resource"},{"children":[{"count":2,"data":[640,854,21,0,1],"debug":[[{"filename":"","line":0}]],"name":"State","type":"resource"}],"data":[640,854,21,0,1],"name":"No Source Line","type":"resource"},{"children":[{"count":3,"data":[1.166667,0,0,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"82"}]],"name":"1-bit Or","type":"resource"},{"count":1,"data":[11,0,0,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"82"}]],"name":"32-bit Integer Compare","type":"resource"},{"count":1,"data":[362,440,13,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"82"}]],"name":"Load","type":"resource"}],"data":[374.166667,440,13,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":82}]],"name":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp:82","replace_name":"true","type":"resource"},{"children":[{"children":[{"count":2,"data":[42,0,0,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"84"}]],"name":"64-bit Integer Compare","type":"resource"},{"count":4,"data":[2.66667,0,0,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"84"}]],"name":"1-bit Or","type":"resource"}],"data":[44.66667,0,0,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":84},{"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_iterator.h","line":886}]],"name":"main.cpp:84 > stl_iterator.h:886","replace_name":true,"type":"resource"},{"children":[{"count":1,"data":[406.5,1325.5,8,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"84"}]],"name":"Load","type":"resource"}],"data":[406.5,1325.5,8,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":84},{"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_vector.h","line":573},{"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_iterator.h","line":783}]],"name":"main.cpp:84 > stl_vector.h:573 > \\nstl_iterator.h:783","replace_name":true,"type":"resource"},{"children":[{"count":1,"data":[406.5,1325.5,8,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"84"}]],"name":"Load","type":"resource"}],"data":[406.5,1325.5,8,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":84},{"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_vector.h","line":591},{"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_iterator.h","line":783}]],"name":"main.cpp:84 > stl_vector.h:591 > \\nstl_iterator.h:783","replace_name":true,"type":"resource"}],"data":[857.6667,2651,16,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":84}]],"name":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp:84","replace_name":"true","type":"resource"},{"children":[{"count":1,"data":[0.5,0,0,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"86"}]],"name":"1-bit Or","type":"resource"},{"count":1,"data":[11,0,0,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"86"}]],"name":"32-bit Integer Compare","type":"resource"},{"count":2,"data":[1008,4100,30,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"86"}]],"name":"Load","type":"resource"}],"data":[1019.5,4100,30,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":86}]],"name":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp:86","replace_name":"true","type":"resource"},{"children":[{"count":2,"data":[0.666667,0,0,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"88"}]],"name":"1-bit Or","type":"resource"},{"count":1,"data":[399,2216,1,0,31],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"88"}]],"name":"Store","type":"resource"}],"data":[399.667,2216,1,0,31],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":88}]],"name":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp:88","replace_name":"true","type":"resource"},{"children":[{"count":1,"data":[504,2050,15,0,0],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"89"}]],"name":"Load","type":"resource"},{"count":1,"data":[1295,2057,1,0,31],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":"89"}]],"name":"Store","type":"resource"}],"data":[1799,4107,16,0,31],"debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp","line":89}]],"name":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp:89","replace_name":"true","type":"resource"}],"compute_units":1,"data":[6417.000367,16773,97,0,73],"details":[{"text":"Number of compute units: 1","type":"text"},{"text":"1 compute unit.","type":"brief"}],"name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41","total_kernel_resources":[6417,16773,97,0,73],"total_percent":[1.85599,0.921934,0.981566,3.57538,0],"type":"function"}],"columns":["","ALUTs","FFs","RAMs","DSPs","MLABs","Details"],"data":[8730.000367,20361,160,0,73],"debug_enabled":"true","max_resources":[854400,1708800,2713,1518,42720],"name":"Kernel System","total":[188680,378933,652,123,73],"total_percent":[43.131,22.2542,22.1754,24.0324,8.10277],"type":"module"};
var mavJSON={"nodes":[{"type":"kernel", "id":2, "name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41", "children":[{"type":"bb", "id":3, "name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41.B0", "children":[{"type":"inst", "id":6, "name":"Load", "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":82}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Prefetching", "Stall-free":"No", "Start Cycle":"211", "Latency":"2", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////opt/intel/oneapi/compiler/2021.1.1/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":7, "name":"Load", "debug":[[{"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_iterator.h", "line":783}]], "details":[{"type":"table", "Width":"128 bits", "Type":"Burst-coalesced non-aligned", "Stall-free":"No", "Start Cycle":"2", "Latency":"211", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////opt/intel/oneapi/compiler/2021.1.1/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":13, "name":"Begin", "details":[{"type":"table", "Start Cycle":"0", "Latency":"1"}]}, {"type":"inst", "id":14, "name":"End", "details":[{"type":"table", "Start Cycle":"214", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"214"}]}, {"type":"bb", "id":4, "name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41.B1", "children":[{"type":"inst", "id":8, "name":"Load", "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":86}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Start Cycle":"1", "Latency":"191", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////opt/intel/oneapi/compiler/2021.1.1/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":9, "name":"Load", "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":86}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Start Cycle":"193", "Latency":"191", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////opt/intel/oneapi/compiler/2021.1.1/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":10, "name":"Store", "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":88}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Start Cycle":"385", "Latency":"26", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////opt/intel/oneapi/compiler/2021.1.1/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":11, "name":"Load", "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":89}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Start Cycle":"411", "Latency":"191", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////opt/intel/oneapi/compiler/2021.1.1/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":12, "name":"Store", "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":89}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Start Cycle":"603", "Latency":"26", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////opt/intel/oneapi/compiler/2021.1.1/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":15, "name":"Loop Input", "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":84}]], "details":[{"type":"table", "Start Cycle":"0", "Latency":"1", "Loops To":"16"}]}, {"type":"inst", "id":16, "name":"Loop End", "details":[{"type":"table", "Start Cycle":"629", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"629", "II":"n/a", "Subloops":"No", "Pipelined":"No", "Fmax Bottlenecks":"No", "Loop Info":"Loop is not pipelined. See Loops Analysis for more information."}]}, {"type":"bb", "id":5, "name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41.B2", "details":[{"type":"table", "Latency":"0"}]}]}, {"type":"memtype", "id":1, "name":"Global Memory", "children":[{"type":"memsys", "id":17, "name":"DDR", "details":[{"type":"table", "Number of banks":"2"}]}]}], "links":[{"from":6, "to":14}, {"from":7, "to":14}, {"from":16, "to":15}, {"from":14, "to":15}, {"from":8, "to":16}, {"from":9, "to":16}, {"from":10, "to":16}, {"from":11, "to":16}, {"from":12, "to":16}, {"from":16, "to":5}, {"from":13, "to":6}, {"from":13, "to":7}, {"from":15, "to":8}, {"from":8, "to":9}, {"from":9, "to":10}, {"from":8, "to":10}, {"from":9, "to":11}, {"from":10, "to":11}, {"from":9, "to":12}, {"from":11, "to":12}, {"from":17, "to":9}, {"from":12, "to":17}, {"from":10, "to":17}, {"from":17, "to":8}, {"from":17, "to":6}, {"from":17, "to":7}, {"from":17, "to":11}]};
var loopsJSON={"columns":["", "Pipelined", "II", "Speculated iterations", "Details"], "children":[{"name":"Kernel: _ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41", "data":["", "", ""], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":81}]], "details":[{"type":"brief", "text":"ND-Range"}, {"type":"text", "text":"ND-Range"}, {"type":"text", "text":"Fmax bottlenck block: None"}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Kernels", "link":"file:////opt/intel/oneapi/compiler/2021.1.1/linux/lib/oclfpga/aoc_help_pages/ipp1476408832230.html"}]}], "children":[{"name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41.B1", "data":["No", "n/a", "n/a"], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":84}]], "details":[{"type":"brief", "text":"Thread capacity = 630"}, {"type":"text", "text":"Thread capacity = 630"}], "children":[]}]}]};
var loop_attrJSON={"name":"loop_attributes", "id":4294967295, "nodes":[{"name":"k0_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41", "id":1464246032, "clk":"No", "fmax":"240.00", "type":"kernel", "children":[{"name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41.B0", "id":1463695872, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"214.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}, {"name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41.B1", "id":1463699296, "af":"240.00", "br":"1", "ci":"0", "fo":"Disabled", "ii":"n/a", "ll":"1", "lt":"629.000000", "mi":"n/a", "pl":"No", "tc":"0", "tn":"1", "details":[{"type":"text", "text":"Hyper-Optimized loop structure: n/a"}], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":84}]], "type":"loop"}, {"name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41.B2", "id":1463699376, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"0.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}]}]};
var summaryJSON={"performanceSummary":{"name":"Kernel Summary", "columns":["Kernel Name", "Kernel Type", "Autorun", "Workgroup Size", "# Compute Units"], "children":[{"name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41", "data":["NDRange", "No", "n/a", 1], "details":[{"type":"text", "text":"Kernel type: NDRange"}], "debug":[[{"filename":"", "line":0}]]}]}, "estimatedResources":{"name":"Estimated Resource Usage", "columns":["Kernel Name", "ALUTs ", "FFs  ", "RAMs ", "DSPs ", "MLABs"], "children":[{"name":"_ZTSZZ3bfsvENKUlRN2cl4sycl7handlerEE72_32clES2_EUlT_E81_41", "data":[6417, 16773, 97, 0, 73], "debug":[[{"filename":"", "line":0}]]}, {"name":"Global Interconnect", "classes":["summary-highlight", "nohover"], "data":[2313, 3521, 61, 0, 0]}, {"name":"Board Interface", "classes":["summary-highlight", "nohover"], "data":[179950, 358572, 492, 123, 0]}, {"name":"System description ROM", "classes":["summary-highlight", "nohover"], "data":[0, 67, 2, 0, 0]}, {"name":"Total", "classes":["summary-highlight", "nohover"], "data":[188680, 378933, 652, 123, 73], "data_percent":[22.0833, 22.1754, 24.0324, 8.10277]}, {"name":"Available", "classes":["summary-highlight", "nohover"], "data":[854400, 1708800, 2713, 1518, 0]}]}, "compileWarnings":{"name":"Compile Warnings", "children":[{"name":"Load uses a Burst-coalesced non-aligned LSU", "details":[{"type":"text", "text":"Use Dynamic Profiler to determine performance impact of this LSU."}], "debug":[[{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":84}, {"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_vector.h", "line":573}, {"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_iterator.h", "line":783}], [{"filename":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "line":84}, {"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_vector.h", "line":591}, {"filename":"/usr/lib/gcc/x86_64-linux-gnu/7.5.0/../../../../include/c++/7.5.0/bits/stl_iterator.h", "line":783}]]}]}};
var warningsJSON={"nodes":[]};
var fileJSON=[{"path":"/opt/intel/oneapi/dev-utilities/2021.1.1/include/dpc_common.hpp", "name":"dpc_common.hpp", "has_active_debug_locs":false, "absName":"/opt/intel/oneapi/dev-utilities/2021.1.1/include/dpc_common.hpp", "content":"//==============================================================\012// Copyright © 2020 Intel Corporation\012//\012// SPDX-License-Identifier: MIT\012// =============================================================\012\012#ifndef _DP_HPP\012#define _DP_HPP\012\012#pragma once\012\012#include <stdlib.h>\012#include <exception>\012\012#include <CL/sycl.hpp>\012\012namespace dpc_common {\012// this exception handler with catch async exceptions\012static auto exception_handler = [](cl::sycl::exception_list eList) {\012  for (std::exception_ptr const &e : eList) {\012    try {\012      std::rethrow_exception(e);\012    } catch (std::exception const &e) {\012#if _DEBUG\012      std::cout << \"Failure\" << std::endl;\012#endif\012      std::terminate();\012    }\012  }\012};\012\012// The TimeInterval is a simple RAII class.\012// Construct the timer at the point you want to start timing.\012// Use the Elapsed() method to return time since construction.\012\012class TimeInterval {\012 public:\012  TimeInterval() : start_(std::chrono::steady_clock::now()) {}\012\012  double Elapsed() {\012    auto now = std::chrono::steady_clock::now();\012    return std::chrono::duration_cast<Duration>(now - start_).count();\012  }\012\012 private:\012  using Duration = std::chrono::duration<double>;\012  std::chrono::steady_clock::time_point start_;\012};\012\012};  // namespace dpc_common\012\012#endif\012"}, {"path":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "name":"main.cpp", "has_active_debug_locs":false, "absName":"/home/alejandror/oneapi-fpga-graph-thesis/src/main.cpp", "content":"#include <CL/sycl.hpp>\012#include <vector>\012#include <CL/sycl/INTEL/fpga_extensions.hpp>\012\012using namespace sycl;\012using namespace std;\012\012#include \"dpc_common.hpp\"\012\012#define NS (1000000000.0) // number of nanoseconds in a second\012\012void bfs()\012{\012    //simple graph init\012    int nodes = 10;\012    vector<vector<int>> graph(nodes, vector<int>(nodes));\012    for (int i = 0; i < nodes; i++)\012    {\012        for (int j = i + 1; j < nodes; j++)\012        {\012            graph[i][j] = rand() % nodes + 1;\012        }\012    }\012    for (int i = 0; i < nodes; i++)\012    {\012        for (int j = i + 1; j < nodes; j++)\012        {\012            std::cout << graph[i][j] << std::endl;\012        }\012    }\012\012    // profiling utils\012    chrono::high_resolution_clock::time_point t1_host, t2_host;\012    sycl::cl_ulong t1_kernel, t2_kernel;\012    double time_kernel;\012    auto my_property_list = property_list{sycl::property::queue::enable_profiling()};\012\012    // create queue\012#if defined(FPGA_EMULATOR)\012    sycl::INTEL::fpga_emulator_selector device_selector;\012#else\012    sycl::INTEL::fpga_selector device_selector;\012#endif\012    queue q(device_selector, NULL, my_property_list);\012    platform platform = q.get_context().get_platform();\012    device my_device = q.get_device();\012    std::cout << \"Platform name: \" << platform.get_info<sycl::info::platform::name>().c_str() << std::endl;\012    std::cout << \"Device name: \" << my_device.get_info<sycl::info::device::name>().c_str() << std::endl;\012    event queue_event;\012\012    //create parent vector\012    vector<int> parent(nodes, -1);\012\012    // start algorithm\012    int source = 0;\012    parent[source] = source;\012    vector<int> frontier(nodes, -1);\012    vector<int> next_frontier(nodes, -1);\012    frontier[source] = 1;\012    vector<int> finish_vector(1, -1);\012\012    buffer graph_buffer(graph);                 // graph buffer, to access in algorithm\012    buffer parent_buffer(parent);               // parent buffer, to wait until algorithm is done to print result\012    buffer frontier_buffer(frontier);           // frontier buffer, reads its nodes in parallel\012    buffer next_frontier_buffer(next_frontier); // next frontier buffer, writes permission needed\012    buffer finish_vector_buffer(finish_vector); // vector just to flag if execution should be stopped\012\012    bool all_nodes_visited = false;\012    auto nodes_range = range(frontier.size());\012    while (!all_nodes_visited)\012    {\012        queue_event = q.submit([&](handler &h) {\012            accessor graph_access(graph_buffer, h, read_only);\012            accessor parents_access(parent_buffer, h);\012            accessor frontier_access(frontier_buffer, h, read_only);\012            accessor next_frontier_access(next_frontier_buffer, h, write_only);\012            accessor finish_vector_access(finish_vector_buffer, h, write_only);\012\012            // iterate over the frontier, update node parents\012\012            h.parallel_for(nodes_range, [=](auto i) {\012                if (frontier_access[i] != -1)\012                {\012                    for (auto &neighbor : graph_access[i])\012                    {\012                        if (parents_access[neighbor] == -1)\012                        {\012                            parents_access[neighbor] = i;\012                            next_frontier_access[neighbor] = 1;\012                        }\012                    }\012                }\012            });\012        });\012        // check if we visited all nodes and algorithm is done\012        host_accessor read_parent(parent_buffer, read_only);\012        host_accessor host_frontier(frontier_buffer);\012        host_accessor host_next_frontier(next_frontier_buffer);\012        all_nodes_visited = true;\012        for (int i = 0; i < nodes; i++)\012        {\012            if (read_parent[i] == -1)\012            {\012                all_nodes_visited = false;\012            }\012        }\012\012        // swap frontier vectors\012        for (int i = 0; i < nodes; i++)\012        {\012            host_frontier[i] = host_next_frontier[i];\012            host_next_frontier[i] = -1;\012        }\012    }\012\012    q.wait();\012\012    // Report kernel execution time and throughput\012    t1_kernel = queue_event.get_profiling_info<sycl::info::event_profiling::command_start>();\012    t2_kernel = queue_event.get_profiling_info<sycl::info::event_profiling::command_end>();\012    time_kernel = (t2_kernel - t1_kernel) / NS;\012    std::cout << \"Kernel execution time: \" << time_kernel << \" seconds\" << std::endl;\012\012    host_accessor read_parent(parent_buffer, read_only);\012    for (int i = 0; i < parent.size(); i++)\012    {\012        std::cout << read_parent[i] << \",\";\012    }\012}\012\012int main()\012{\012    bfs();\012}"}];
var alpha_viewer=false;